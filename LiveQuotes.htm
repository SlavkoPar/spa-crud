<!DOCTYPE html>
<html>

  <head>
    <title>Bootstrap 101 Template</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <!-- Always force latest IE rendering engine or request Chrome Frame -->
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <META HTTP-EQUIV="PRAGMA" CONTENT="NO-CACHE" />

    <title>Layout Example</title>

    <link href='//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.min.css' rel='stylesheet' type='text/css'>
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" rel="stylesheet" type="text/css" />

    <!--js-->
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.js" type="text/javascript"></script>  <!--min.-->

    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.2.0/knockout-min.js" type="text/javascript"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js" type="text/javascript"></script>

    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>
      
    <script src="//code.highcharts.com/stock/highstock.js" type="text/javascript"></script>

	<style type="text/css">

        /* --------------------------- */
        /*     onyx-table              */
        /* --------------------------- */

        .onyx-table {
            position: relative !important;
            table-layout: fixed;
            white-space: nowrap;
            border-top-width: 0px !important;
            margin-bottom: 0px !important;
        }

        .onyx-table > thead > tr > th {
            padding: 0px !important;
            border-bottom-width:0px !important;
        }
        
        .onyx-table > tbody > tr:first-child > td {
          border-top-width: 0px !important;
          border-width: 0px !important;
        }

        .onyx-table > tbody > tr > td {
          border-width: 0px !important;
        }


    .first { font-size: 18px; }
    .last2 { color: #5D5D5D; font-weight:bold; line-height:30px;  font-size:28px; padding:0 2px; }
    .last2grid { color: #5D5D5D; font-weight:bold; line-height: 12px;font-size: 12px; padding:0 2px; }
    .adv-tpl sup { vertical-align:super; font-size:85%; }

    
    tr.tpl > td > i {
        display: none;
    }
    tr.tpl i.fa-caret-up {
        color: #66AFFF;
    }
    tr.tpl i.fa-caret-down {
        color: #f44;
    }
    tr.tpl > td.blink-up > i.fa-caret-up {
        display: inline;
    }
    tr.tpl > td.blink-down > i.fa-caret-down {
        display: inline;
    }
    

    /* blink a > span snap sub */
    tr.tpl > td.blink-up > a * {
      color: #66AFFF;
    }
    tr.tpl > td.blink-down > a * {
      color: #f44;
    }

    /* td a text */
    tr.tpl > td.blink-text-up > a * {
      color: #66AFFF;
    }
    tr.tpl > td.blink-text-down > a * {
      color: #f44;
    }

    /* td text */
    tr.tpl > td.blink-text-up > span {
      color: #66AFFF;
    }
    tr.tpl > td.blink-text-down > span {
      color: #f44;
    }


    </style>

</head>

<body style="padding:20px;">

    <div class="row">
        <div class="col-xs-6 well">
            <table  cellpadding="0" cellspacing="0" border="0"
                    class="table table-striped table-bordered table-hover table-condensed onyx-table">
                <thead>
                    <tr>
                        <th width="40%" style="text-align:center"></th>
                        <th width="28%" style="text-align:right"></th>
                        <th width="2%" style="padding-left: 1px; padding-right:1px;"></th>
                        <th width="28%" style="text-align:right"></th>
                        <th width="2%" style="padding-left: 1px; padding-right:1px;"></th>
                    </tr>
                </thead>
                <tbody data-bind="template: { name: 'live-quotes-row',  foreach : liveQuotes.symbols }"></tbody>
            </table>
        </div>
        <div class="col-xs-6">
            <div id="container" style="height: 400px; min-width: 310px"></div>
        </div>
    </div>
 
    <script type="text/html" id="live-quotes-row">
        <tr class="tpl" data-bind="attr: { id: symbolId, index: $index }">
            <td style="text-align:left">
                <span data-bind='text: symbolName' style='text-align: left; margin-left: 2px;'></span>
            </td>

            <td class="price" align="right" data-bind="css: bid.blinkText" data-field="bid_cell">
                <span data-bind="text: bid.base"></span><span class="last2grid" data-bind="text:bid.last2"></span><sup data-bind="text:bid.fract"></sup>
            </td>
            <td class="caret-blink" data-bind="css: bid.blinkArrow">
                <i class="fa fa-2 fa-caret-up"></i>
                <i class="fa fa-2 fa-caret-down"></i>
            </td>

            <td class="price" align="right" data-bind="css: ask.blinkText" data-field="ask_cell">
                <span data-bind="text: ask.base"></span><span class="last2grid" data-bind="text:ask.last2"></span><sup data-bind="text:ask.fract"></sup>
            </td>
            <td class="caret-blink" data-bind="css: ask.blinkArrow">
                <i class="fa fa-2 fa-caret-up"></i>
                <i class="fa fa-2 fa-caret-down"></i>
            </td>
           
        </tr>
    </script>


<script type="text/javascript">

    Array.prototype.last = function () {
        return this[this.length - 1];
    }

    function logIt(obj) {
        if (window.console && window.console.log)
            window.console.log(obj);
    }

    function Price(fractional, digits, val) {
        this.fractional = fractional;
        this.fract2 = fractional + 2;
        this.digits = digits;
        this.value = val;

        this.base = ko.observable("");
        this.last2 = ko.observable("");
        this.fract = ko.observable("");

        this.isUp = ko.observable(true);

        this.timeoutText = null;
        this.timeoutArrow = null;
        this.blinkText = ko.observable("");
        this.blinkArrow = ko.observable("");

        var that = this;
        this.update = function (val) {
           
            this.isUp = val > this.value;
            this.value = val;
            var sPrice = val.toFixed(this.digits);
            var d = sPrice.length - this.fract2;
            this.base(sPrice.substr(0, d));
            this.last2(sPrice.substr(d, 2));
            this.fract(this.fractional == 0 ? "" : sPrice.charAt(sPrice.length - 1));

            this.blinkText(this.isUp ? "blink-text-up" : "blink-text-down");
            this.blinkArrow(this.isUp ? "blink-up" : "blink-down");
            clearTimeout(this.timeoutText);
            clearTimeout(this.timeoutArrow);
            this.timeoutText = setTimeout(function () { that.blinkText("") }, 500)
            this.timeoutArrow = setTimeout(function () { that.blinkArrow("") }, 2000)
        }
    }
   

    function Symbol(data) {
        this.symbolName = ko.observable(data.symbol || "");
        this.symbolId = ko.observable(data.symbol || "");
        this.decimals = data.decimals || 4;
        this.fractional = data.fractional || 1;
        this.digits = (data.decimals || 4) + (data.fractional || 1);
        
        this.bid = new Price(this.fractional, this.digits, data.bid || 0.0);
        this.bid.update(data.bid || 0.0);
        this.ask = new Price(this.fractional, this.digits, data.ask || 0.0);
        this.ask.update(data.ask || 0.0);
    }


    var lsClient =  {
        snapshotSymbols: [
               { symbol: "EURUSD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "GBPUSD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "USDJPY", dec: 2, fract: 0, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "USDCHF", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "GBPCHF", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "NZDUSD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "USDCAD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "GBPJPY", dec: 2, fract: 0, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "EURNZD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "EURJPY", dec: 2, fract: 0, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "EURCHF", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "AUDCAD", dec: 4, fract: 1, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "AUDJPY", dec: 2, fract: 0, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() },
               { symbol: "CADJPY", dec: 2, fract: 0, bid: 1.0, ask: 1.1, epoch: (new Date()).getTime() }
        ],

        subscription : null,

        subscribe : function (s) {
            this.subscription = s;
            var subscription = s;
            // subscribe to server
            var n = 300;
            $.each(this.snapshotSymbols, function (index, sym) {
                subscription.onItemUpdate($.extend(sym, { command: "ADD" }));

                // set up the updating of the each second
                setInterval(function () {
                    var obj = $.extend({}, sym, { command: "UPDATE" })
                    
                    if (Math.random() > 0.5) {
                        obj.ask -= Math.random();
                        obj.bid -= Math.random();
                    }
                    else {
                        obj.ask += Math.random();
                        obj.bid += Math.random();
                    }
                    obj.epoch = (new Date()).getTime();
                    
                    subscription.onItemUpdate(obj);
                }, n);
                n += 30;
            });
            subscription.onEndOfSnapshot()
        }
    };



    function Subscription() {
        var mode = "COMMAND"
        items = [],
        cellList = ["command", "key", "epoch", "bid", "ask", "decimals", "fractional"],

        dataAdapter = "SPIKE_FEED_ADAPTER",
        requestedSnapshot = "yes",
        requestedMaxFrequency = 1;

        this.onSubscription = function () { }
        this.onItemUpdate = function () { }
        this.onEndOfSnapshot = function () { }

        this.init = function (itemList) {
            items = itemList;
        }

        this.setRequestedSnapshot = function (yesNo) {
            requestedSnapshot = yesNo
        }

        this.setRequestedMaxFrequency = function (maxFrequency) {
            requestedMaxFrequency
        }
            
        this.addListener = function (config) {
            this.onSubscription = config.onSubscription,
            this.onEndOfSnapshot = config.onEndOfSnapshot,
            this.onItemUpdate = config.onItemUpdate
        }
    };


    var LiveQuotes = function () {
        var container = null,
            symbolNames = ko.observableArray([]),
            subscription = null,
            symbols = ko.observableArray([]),
            symbolDict = {},

        init = function (div, names) {
            container = div;
            symbolNames = ko.observableArray(names);
        },

        subscribe = function () {
            
            subscription = new Subscription(symbolNames);
            subscription.setRequestedSnapshot("yes");
            subscription.setRequestedMaxFrequency(1);

            subscription.addListener({
                onSubscription: function () {
                    OnSubscription()
                },
                onItemUpdate: function (info) {
                    OnItemUpdate(info)
                },
                onEndOfSnapshot: function () {
                    OnEndOfSnapshot()
                }
            });

            lsClient.subscribe(subscription);
        },

        OnSubscription = function () {
            logIt("LiveQuotes.OnSubscription()")
        },

        OnEndOfSnapshot = function () {
            logIt("LiveQuotes.OnEndOfSnapshot()")
        },

        OnAdd = function (data) {
            var symbol = ko.mapping.fromJS(data, {
                key: function (symbol) {
                    return ko.utils.unwrapObservable(symbol.SymbolId);
                },
                create: function (options) {
                    return new Symbol(options.data);
                }
            });
            symbols.push(symbol);
        },

        getSymbol = function (symbolId) {
            return ko.utils.arrayFirst(symbols(), function (obj) {
                return obj.symbolId() == symbolId;
            });
            alert("Not found symbols(" + symbolId + ")");
            return null;
        }

        OnItemUpdate = function (obj) {
            var command = obj.command;
            //logIt("STOCK_QUOTES command/key/symbol:" + command + "/" + key + "/" + symbol);
            if (command == "UPDATE") {
                //logIt("UPDATE " + pSymbolGroup.GroupName + " / " +  symbol)
                
                var symbolId = obj.symbol;
                var symbol = symbolDict[symbolId];
                if (!symbol) 
                    symbol = symbolDict[symbolId] = getSymbol(symbolId);

                //if (!symbol)   // allow updating of the InitialView while rendering rest of rows
                //    return;
                symbol.bid.update(obj.bid);
                symbol.ask.update(obj.ask);

                if (obj.symbol == 'EURUSD')
                    UpdateTick(obj.epoch, obj.bid, obj.ask);
            }
            else if (command == "ADD") {
                OnAdd(obj)
            }
            else if (command == "DELETE") {
                OnDelete(symbolId)
            }
        };


        return {
            init: init,
            subscribe: subscribe,
            symbols: symbols
        }
    };
    
    var liveQuotes;
    var mayors = [  "EURUSD", "GBPUSD", "USDJPY", "USDCHF", "GBPCHF", "NZDUSD", "USDCAD",
                    "GBPJPY", "EURNZD", "EURJPY", "EURCHF", "AUDCAD", "AUDJPY", "CADJPY"]

    
    function MyViewModel() {
        this.liveQuotes = new LiveQuotes();
    }

    var myViewModel = new MyViewModel();

    $(document).ready(function () {

        myViewModel.liveQuotes.init($('#Mayors'), mayors);
        myViewModel.liveQuotes.subscribe();

        ko.applyBindings(myViewModel);

        // chart
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });

        CreateTheChart();
    });




    var label0 = label1 = null,
       labelX = 0,
       rect0 = rect1 = null,
       prevAsk = -9999,
       prevBid = -9999;



    function CreateTheChart() {

        var dataBid = [],
            dataAsk = [],
            time = (new Date()).getTime();


        for (var i = -200; i <= 0; i += 1) {
            dataBid.push([
                time + i * 20000,
                //Math.round(Math.random() * 10)
                1 + Math.random()
            ]);
            dataAsk.push([
                time + i * 20000,
                //Math.round(Math.random() * 10 - 0.3)
                1 + Math.random() - 0.3
            ]);
        }

        /*
        $('#container').highcharts('StockChart', {
            chart: {
                events: {
                    load: function () {

                        // set up the updating of the chart each second
                        var series0 = this.series[0];
                        var series1 = this.series[1];
                        var me = this;
                        setInterval(function () {
                            var x = (new Date()).getTime(), // current time
                                y = 1 + Math.random();  // Math.round(
                            
                            series0.addPoint([x, y], false, true);
                            series1.addPoint([x, y + 0.2], false, true);
                            me.redraw();
                        }, 1000);
                    }
                }
            },
            
            animation: false,

            rangeSelector: {
                enabled: false
            },

            navigator: {
                enabled: false
            },

            scrollbar: {
                enabled: false
            },

            exporting: { enabled: false },
            credits: { enabled: false },

            title: {
                text: 'Live random data'
            },

            exporting: {
                enabled: false
            },

            series: [{
                        name: 'Bid',
                        type: 'area',
                        data: dataBid
                    },
                    {
                        name: 'Ask',
                        type: 'area',
                        data: dataAsk
                    }]
        });
    }
    */


       

        _stockChart = new Highcharts.StockChart({
            title: {
                text: "EURUSD",
                floating: true,
                align: 'left',
                x: 10,
                y: 20
            },
            chart: {
                backgroundColor: 'rgba(255, 255, 255, 0.1)',
                borderColor: '#ddd',
                borderWidth: 1,
                borderRadius: 5,
                shadow: {
                    color: '#ddd',
                    //offsetX:, 
                    //offsetY:,
                    //opacity:,
                    width: 4
                },
                renderTo: 'container',
                events: {
                    load: function () {
                        // set up the updating of the chart each second
                        // var series = this.series[0];
                        //setInterval(function () {
                        //    series.addPoint([x, y], true, true);
                        //}, 1000);
                        //if (g_Symbol == "AAAANR")
                        /*
                        StartChartTicker();
                        */
                        //_chartLoaded = true;
                        var series0 = this.series[0];
                        var series1 = this.series[1];
                        
                    },
                    click: function (event) {  // click out of the point
                        $(".popover-elem.popoverShown").popover("hide"); // hide all
                    },

                    redraw: function () {
                        /*
                        var label = this.renderer.label('The chart was just redrawn', 100, 120)
                            .attr({
                                fill: Highcharts.getOptions().colors[0],
                                padding: 10,
                                r: 5,
                                zIndex: 8
                            })
                            .css({
                                color: '#FFFFFF'
                            })
                            .add();

                        setTimeout(function () {
                            label.fadeOut();
                        }, 1000);
                        */
                        
                        if (label0)
                            labelX = _stockChart.plotSizeX + 16;
                        
                    }

                }
            },

            animation: false,

            rangeSelector: {
                enabled: false
            },

            navigator: {
                enabled: false
            },

            scrollbar: {
                enabled: false
            },

            exporting: { enabled: false },
            credits: { enabled: false },

            xAxis: {
                type: 'datetime',
                //tickInterval: 30000 //7 * 24 * 3600 * 1000, // one week
                //Highcharts.dateFormat('%H:%M:%S', this.x)
                labels: {
                    format: '{value:%H:%M}'  // %Y-%m-%d %H:%M:%S
                    //, align: 'left'
                }
                /*
                dateTimeLabelFormats: {
                    second: '%H:%M:%S',
                    millisecond: '%H:%M:%S'  // .%L
                }

                //,gridLineWidth: 1 // New value
                /*,
                ,second: '%H:%M:%S',
                minute: '%H:%M',
                hour: '%H:%M'  // '%Y-%m-%d<br/>%H:%M'
                day: '%Y<br/>%m-%d',
                week: '%Y<br/>%m-%d',
                month: '%Y-%m',
                year: '%Y'*/
                /*,
                labels: {
                rotation:90
                //, staggerLines:3
                }*/
            },

            yAxis: {
                opposite: true,
                offset: 55
            },

            /*tooltip: {
                crosshairs: [false, false],
                enabled: true
                //backgroundColor: '#333',
                //borderColor: '#222',
                //style: {
                //    color: '#bbb',
                //    fontSize: '12px',
                //    padding: '8px'
                //}
            },
            */


            tooltip: {
                crosshairs: [false, false],
                enabled: true,
                //xDateFormat: '%e, %H:%M:%S.%L',  //%Y-%m-%d     %A,   // %b 
                shared: true,
                //pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: <b>{point.y}</b><br/>',

                formatter: function () {
                    var s = '<b>' + self.Name + ' ' + Highcharts.dateFormat('%H:%M:%S', this.x) + '</b>';  // %A, %b %e, %Y
                    $.each(this.points, function () {
                        s += '<br/>' + '<span style="color:' + this.series.color + '">\u25CF</span>' + this.series.name + ': ' + this.y.toFixed(5);
                    });
                    return s;
                },

                positioner: function () {
                    return { x: 9, y: 9 }
                },

                backgroundColor: 'rgba(255, 255, 255, 0.99)',

                style: {
                    color: '#222',
                    fontSize: '11px',
                    padding: '3px',
                    zIndex: 1033
                }
            },

            animation: false,

            plotOptions: {
                series: {
                    /*
                    dataLabels: {
                        enabled: true,
                        borderRadius: 5,
                        backgroundColor: 'rgba(252, 255, 197, 0.7)',
                        borderWidth: 1,
                        borderColor: '#AAA',
                        align: 'left',
                        style: {
                            fontWeight: 'bold'
                        },
                        verticalAlign: 'middle',
                        overflow: 'none',
                        crop: false,
                        zIndex: 1101
                    },*/

                    shadow: true,
                    cursor: 'pointer',
                    lineWidth: 2,
                    //fillOpacity: 0.1/*,
                    fillColor: {
                        /*
                        linearGradient : {
                        x1: 0, y1: 0, x2: 0, y2: 1
                        },
                        //stops : [[0, Highcharts.getOptions().colors[0]], [1, 'rgba(0,0,0,0)']]
                        stops : [[0, Highcharts.getOptions().colors[0]], [1, '#ADD8E6']]
                        */
                        linearGradient: [0, 0, 0, 300],
                        stops: [
                                    [0, 'rgba(33,125,229,0.7)'],
                        //[1, 'rgba(2,0,0,0)']
                                    [1, 'rgba(120,180,255,0.1)']
                        ]
                    }
                }
            },

            series: [
                    {
                        name: 'ask',
                        type: 'area',
                        threshold: null,
                        //pointStart: (new Date()).getTime(),
                        dataLabels: {
                            style: {
                                color: 'Blue'
                            }
                        },
                        data: dataAsk,
                        tooltip: {
                            //valueDecimals: self.decFract
                            shared: true
                        }
                    },
                    {
                        name: 'bid',
                        type: 'area',
                        threshold: null,
                        //pointStart: (new Date()).getTime(),
                        dataLabels: {
                            style: {
                                color: 'Black'
                            }
                        },

                        data: dataAsk,
                        tooltip: {
                            //valueDecimals: self.decFract
                            shared: true
                        }
                    }
            ]
        })

    };




    function moveLabel0() {
        var yAxis = _stockChart.yAxis[0];
        label0.attr({ text: prevAsk.toFixed(5), x: labelX, y: yAxis.toPixels(prevAsk) + 5 })
        //box = _label0.getBBox();
        //box.y - 2;
        rect0.attr({ x: labelX, y: yAxis.toPixels(prevAsk) - 8 });
    }

    function moveLabel1() {
        var yAxis = _stockChart.yAxis[0];
        label1.attr({ text: prevBid.toFixed(5), x: labelX, y: yAxis.toPixels(prevBid) + 5 })
        //box = label1.getBBox();
        rect1.attr({ x: labelX, y: yAxis.toPixels(prevBid) - 8 });
    }




    function UpdateTick(epoch, bid, ask) {
        var series0 = _stockChart.series[0];
        var series1 = _stockChart.series[1];

        if (label0 != null) {
            // ask
            if (prevAsk != ask) {
                prevAsk = ask;
                //clearTimeout(self.timeoutLabel0);
                //self.timeoutLabel0 = setTimeout(function () { self.moveLabel0() }, 300)
                moveLabel0();
            }
            // bid
            if (prevBid != bid) {
                prevBid = bid;
                //clearTimeout(self.timeoutLabel1);
                //self.timeoutLabel1 = setTimeout(function () { self.moveLabel1() }, 300)
                moveLabel1();
            }
        }

        series0.addPoint([epoch, ask], false, /*(_points >= _maxNumOfTicksAtChart)*/true, false);  // false
        series1.addPoint([epoch, bid], false, /*(_points >= _maxNumOfTicksAtChart)*/true, false);
        _stockChart.redraw();


        if (label0 == null) {
            // ask
            prevAsk = ask;
            label0 = _stockChart.renderer
                        .text(ask.toFixed(5), _stockChart.plotSizeX + 16, /*chart.plotSizeY -*/_stockChart.yAxis[0].toPixels(ask) + 5)
                        .attr({
                            //align: 'center',
                            zIndex: 32
                        })
                        .css({
                            //borderRadius: 5,
                            color: 'Blue',
                            //backgroundColor: 'rgba(252, 255, 197, 0.7)',
                            //borderWidth: 1,
                            //borderColor: '#AAA',
                            fontWeight: 'bold',
                            fontSize: '11px'
                            //,fontFamily: "Source Sans Pro",
                            //textShadow: "0px 0px 1px white"
                            //, zIndex: 32
                        }).add();

            var box = label0.getBBox();
            labelX = box.x - 3;
            //x = chart.plotLeft + (chart.plotWidth * 0.5) - (textBBox.width * 0.5);
            //y = chart.plotTop + (chart.plotHeight * 0.5) - (textBBox.height * 0.5);

            rect0 = _stockChart.renderer
                .rect(labelX, box.y - 1, box.width + 6, box.height + 2, 5)
                .attr({
                    fill: 'rgba(252, 255, 197, 0.7)',
                    stroke: 'gray',
                    'stroke-width': 1,
                    zIndex: 31
                })
                .add();
            // bid
            prevBid = bid;
            label1 = _stockChart.renderer
                        .text(bid.toFixed(5), _stockChart.plotSizeX + 16, /*chart.plotSizeY -*/_stockChart.yAxis[0].toPixels(bid) + 5)
                        .attr({
                            //align: 'center',
                            zIndex: 32
                        })
                        .css({
                            //borderRadius: 5,
                            color: 'Black',
                            //backgroundColor: 'rgba(252, 255, 197, 0.7)',
                            //borderWidth: 1,
                            //borderColor: '#AAA',
                            fontWeight: 'bold',
                            fontSize: '11px'
                            //fontFamily: "Source Sans Pro"
                            //textShadow: "0px 0px 1px white"
                            //, zIndex: 32
                        }).add();

            box = label1.getBBox();
            //x = chart.plotLeft + (chart.plotWidth * 0.5) - (textBBox.width * 0.5);
            //y = chart.plotTop + (chart.plotHeight * 0.5) - (textBBox.height * 0.5);
            rect1 = _stockChart.renderer
                .rect(labelX, box.y - 1, box.width + 6, box.height + 2, 5)
                .attr({
                    fill: 'rgba(252, 255, 197, 0.7)',
                    stroke: 'gray',
                    'stroke-width': 1,
                    zIndex: 31
                })
                .add();
        }

    }

</script>






</body>
</html>
